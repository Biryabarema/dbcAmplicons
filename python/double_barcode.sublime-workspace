{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ID",
				"ID	(global, instance)"
			],
			[
				"good",
				"goodReadsCounter"
			],
			[
				"goo",
				"goodReadsCounter"
			],
			[
				"uniq",
				"uniquesFile	(global, instance)"
			],
			[
				"Output_",
				"Output_unique	(global, instance)"
			],
			[
				"unique",
				"uniqueDict	(global, instance)"
			],
			[
				"bc",
				"bc	(global, instance)"
			],
			[
				"s",
				"s"
			],
			[
				"read",
				"read	(local, instance)"
			],
			[
				"Output",
				"Output_prefix	(global, instance)"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/env python\n\"\"\"\nTag reads from dual barcoded experiments\n\"\"\"\n\nfrom Bio import SeqIO\nimport sys\nimport gzip\nimport time\n#import re\nfrom collections import Counter\n\nbarcodeMaxDiff = 1\nprimerMaxDiff = 4\n\nbarcodeFile = \"MetaData/barcodeLookupTable.txt\"\nprimerForward = \"MetaData/fwd_primer.fasta\"\nprimerReverse = \"MetaData/rev_primer.fasta\"\n\nR1_File ='Amplicon_Raw_fastq/20130910DBCAmpliconWesleyForney/AllReads_NoIndex_L001_R1_001.fastq.gz'\nR2_File ='Amplicon_Raw_fastq/20130910DBCAmpliconWesleyForney/AllReads_NoIndex_L001_R2_001.fastq.gz'\nR3_File ='Amplicon_Raw_fastq/20130910DBCAmpliconWesleyForney/AllReads_NoIndex_L001_R3_001.fastq.gz'\nR4_File ='Amplicon_Raw_fastq/20130910DBCAmpliconWesleyForney/AllReads_NoIndex_L001_R4_001.fastq.gz'\n\n#R1_File = 'Amplicon_Raw_fastq/test40k_R1_001.fastq.gz'\n#R2_File = 'Amplicon_Raw_fastq/test40k_R2_001.fastq.gz'\n#R3_File = 'Amplicon_Raw_fastq/test40k_R3_001.fastq.gz'\n#R4_File = 'Amplicon_Raw_fastq/test40k_R4_001.fastq.gz'\n\nOutput_prefix = 'DBCWesleyForney'\nOutput_report = 'DBCWesleyForney_report.txt'\nOutput_unique = 'DBCWesleyForney_uniques.txt'\n\n# ------- read in barcodes and make a dictionary for lookup ----------------\nbarcodes = {}\nP5 = []\nP7 = []\nIDS = []\nbcfile = open(barcodeFile,'rb')\nf = bcfile.readlines()[1:]\nfor row in f:\n    row = row.rstrip()\n    ID, P5Name, P5BC, P7Name, P7BC = row.split('\\t')\n    if P5BC not in P5:\n        P5.extend([P5BC])\n    if P7BC not in P7:\n        P7.extend([P7BC])\n    IDS.extend([ID])\n    barcodes[\"%s %s\" % (P7BC, P5BC)] = ID\n\nbcfile.close()\n\n# ------- build primer dictionary --------\nprimersP5 = {}\nprimersP7 = {}\n\nfor seq in SeqIO.parse(open(primerForward, 'r'), 'fasta'):\n    primersP5[seq.seq.tostring()] = seq.id\n\nfor seq in SeqIO.parse(open(primerReverse, 'r'), 'fasta'):\n    primersP7[seq.seq.tostring()] = seq.id\n\n\n# ---------- input files -----------------------\nR1 = SeqIO.parse(gzip.open(R1_File, 'rb'), 'fastq')\nR2 = SeqIO.parse(gzip.open(R2_File, 'rb'), 'fastq')\nR3 = SeqIO.parse(gzip.open(R3_File, 'rb'), 'fastq')\nR4 = SeqIO.parse(gzip.open(R4_File, 'rb'), 'fastq')\n\n# ------- setup output files ------------\noutf = {'identified':[gzip.open(Output_prefix + '_R1.fastq.gz', 'wb'), gzip.open(Output_prefix + '_R2.fastq.gz', 'wb')], 'unidentified':[gzip.open(Output_prefix + '_Unidentified_R1.fastq.gz', 'wb'), gzip.open(Output_prefix + '_Unidentified_R2.fastq.gz', 'wb')]}\n\nbarcodesFile = open(Output_report, 'w')\nuniquesFile = open(Output_unique, 'w')\n\n# ------- make some counters for reporting ------------\ncounters = {}\nfor bc in barcodes:\n    counters[barcodes[bc]] = [0, 0, 0]  # first value is perfect matches, second is 1bp mismatch in bc1, third is 1bp mismatch in bc2\ngoodReadsCounter = 0\notherCounter = 0\nuniqueCounter = 0\nreads = 0\nlasttime = time.time()\n\n# ---------- Unique Dictionary ------------- #\nuniqueDict = {}\n#------------------- functions ------------------------------\ndef barcodeDist(b_1, b_2):\n    'counts mismatches between two equal-length strings'\n    if len(b_1) == len(b_2) and len(b_1) > 0:\n        return sum(map(lambda x: x[0] != x[1], zip(b_1, b_2) )) # python is bad-ass\n    else:\n        print \"ERROR lengths of barcodes and index read do not match!\"\n        print \"Target\", b_1\n        print \"Index read:\", b_2\n        sys.exit()\n\n#------------------- functions ------------------------------\ndef primerDist(read, primer):\n    'counts mismatches between primer and sequence'\n    read = read[0:(len(primer)-1)]\n    return sum(map(lambda x: x[0] != x[1], zip(read, primer) )) # python is bad-ass\n\n# ------- work horse function ---------------\ntry:\n    while 1:\n        read1 = R1.next()\n        read2 = R2.next()\n        read3 = R3.next()\n        read4 = R4.next()\n        reads += 1\n\n        ### Barcode Matching ###\n        bc1 = None\n        bc1Mismatch = False\n        if read2.seq.tostring() in P7:\n            bc1 = read2.seq.tostring()\n        else:\n            for key in P7:\n                bcdist = barcodeDist(key, read2.seq.tostring())\n                if bcdist <= barcodeMaxDiff:\n                    bc1 = key\n                    bc1Mismatch = True\n\n        bc2 = None\n        bc2Mismatch = False\n        if read3.seq.tostring() in P5:\n            bc2 = read3.seq.tostring()\n        else:\n            for key in P5:\n                bcdist = barcodeDist(key, read3.seq.tostring())\n                if bcdist <= barcodeMaxDiff:\n                    bc2 = key\n                    bc2Mismatch = True\n\n        combined_bc = None\n        if \"%s %s\" % (bc1, bc2) in barcodes:\n            combined_bc = barcodes[\"%s %s\" % (bc1, bc2)]\n            counters[combined_bc][0] += 1\n            if bc1Mismatch:\n                counters[combined_bc][1] += 1\n            if bc2Mismatch:\n                counters[combined_bc][2] += 1\n\n\n        ### Primer Matching ###\n        primer1 = None\n        primer1Mismatch = 10\n        for primer in primersP5.keys():\n            pmismatches = primerDist(read1.seq.tostring(), primer)\n            if pmismatches < primer1Mismatch:\n                primer1 = primer\n                primer1Mismatch = pmismatches\n        if (primer1 != None):\n            read1 = read1[len(primer1):]\n            primer1 = primersP5[primer1]\n\n\n        primer2 = None\n        primer2Mismatch = 10\n        for primer in primersP7.keys():\n            pmismatches = primerDist(read4.seq.tostring(), primer)\n            if pmismatches < primer2Mismatch:\n                primer2 = primer\n                primer2Mismatch = pmismatches\n        if (primer2 != None):\n            read4 = read4[len(primer2):]\n            primer2 = primersP7[primer2]\n\n        primer_id = None\n        if primer1 == primer2 and primer1Mismatch <= primerMaxDiff and primer2Mismatch <= primerMaxDiff:\n            primer_id = primer1\n\n        ### Output Reads ###\n        if combined_bc is not None and primer_id is not None:\n            read1.id = read1.name =  \"%s 1:N:0:%s-%s|%s|%s|%s|%s\" % (read1.id.split()[0], read2.seq.tostring(), read3.seq.tostring(), combined_bc, primer_id, primer1Mismatch, primer2Mismatch)\n            read1.description = \"\"\n            SeqIO.write(read1, outf['identified'][0], \"fastq\")\n            read4.id = read4.name =  \"%s 2:N:0:%s-%s|%s|%s|%s|%s\" % (read4.id.split()[0], read2.seq.tostring(), read3.seq.tostring(), combined_bc, primer_id, primer1Mismatch, primer2Mismatch)\n            read4.description = \"\"\n            SeqIO.write(read4, outf['identified'][1], \"fastq\")\n            txt = '\\t'.join([read1.id.split()[0], read2.seq.tostring(), read3.seq.tostring(), combined_bc, primer_id, str(primer1Mismatch), str(primer2Mismatch)]) + '\\n'\n            barcodesFile.write(txt)\n            goodReadsCounter += 1\n            comb_read = read1 + read4\n            comb_read = \"\".join([comb_read.seq.tostring(), primer_id])\n            if (comb_read in uniqueDict):\n                uniqueDict[comb_read]['bc_counts'][combined_bc] += 1\n            else:\n                uniqueDict[comb_read] = {}\n                uniqueDict[comb_read]['read1'] = read1.seq.tostring()\n                uniqueDict[comb_read]['read2'] = read4.seq.tostring()\n                uniqueDict[comb_read]['primer_id'] = primer_id\n                uniqueDict[comb_read]['bc_counts'] = Counter()\n                uniqueDict[comb_read]['bc_counts'][combined_bc] += 1\n                uniqueCounter += 1\n\n        else:\n            read1.id = read1.name =  \"%s 1:N:0:%s-%s|%s|%s|%s|%s|%s\" % (read1.id.split()[0], read2.seq.tostring(), read3.seq.tostring(), combined_bc, primer1, primer1Mismatch, primer2, primer2Mismatch)\n            read1.description = \"\"\n            SeqIO.write(read1, outf['unidentified'][0], \"fastq\")\n            read4.id = read4.name =  \"%s 2:N:0:%s-%s|%s|%s|%s|%s|%s\" % (read4.id.split()[0], read2.seq.tostring(), read3.seq.tostring(), combined_bc, primer1, primer1Mismatch, primer2, primer2Mismatch)\n            read4.description = \"\"\n            SeqIO.write(read4, outf['unidentified'][1], \"fastq\")\n            otherCounter += 1\n\n\n        ### Report every 100K ###\n        if reads % 10000 == 0:\n            print\"-------------------\"\n            print \"%s reads processed.Reads/second %s\" % (reads, reads/(time.time() - lasttime))\n            countersums = [0, 0, 0]\n            for k in counters:\n                countersums[0] += counters[k][0]\n                countersums[1] += counters[k][1]\n                countersums[2] += counters[k][2]\n            print \"identified:%s,\\tmismatch bc1:%s,\\tmismatch bc2:%s\" % (countersums[0], countersums[1], countersums[2])\n            print \"good reads: %s\" % goodReadsCounter\n            print \"other: %s\" % otherCounter\n            print \"uniques: %s\" % uniqueCounter\n            print\"-------------------\"\nexcept StopIteration:\n    pass\nfinally:\n    print \"Finished processing \"\n\n    print\"-------------------\"\n    print \"%s reads processed in %s hours\" % (reads,(time.time()-lasttime)/(60*60))\n    for k in IDS:\n        print \"%s:\\tidentified:%s,\\tmismatch bc1:%s,\\tmismatch bc2:%s\" % (k, counters[k][0], counters[k][1], counters[k][2])\n    print \"good reads: %s\" % goodReadsCounter\n    print \"other: %s\" % otherCounter\n    print \"uniques: %s\" % uniqueCounter\n    print\"-------------------\"\n    txt = '\\t'.join([\"read1\" ,\"read2\" ,\"primer_id\"])\n    for bc in IDS:\n        txt = '\\t'.join([txt, bc])\n    txt = txt  + '\\n'\n    uniquesFile.write(txt)\n    for k in uniqueDict:\n        txt = '\\t'.join([uniqueDict[k]['read1'], uniqueDict[k]['read2'], uniqueDict[k]['primer_id']])\n        for bc in IDS:\n            txt = '\\t'.join([txt, str(uniqueDict[k]['bc_counts'][bc])])\n        txt = txt  + '\\n'\n        uniquesFile.write(txt)\n    for k in outf:\n        outf[k][0].close()\n        outf[k][1].close()\n    barcodesFile.close()\n    uniquesFile.close()\n",
			"file": "Dual_BC_tagger.py",
			"file_size": 9746,
			"file_write_time": 1379283089000000,
			"settings":
			{
				"buffer_size": 9746,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "HWI-ST665R_d1k7macxx:1:2103:8517:110354#0       73      A.inornata_:_A.inornata_Mc1R_:_scaffold00001    7       40      99M     =       7       0       CAGAGCAAGGAGCTGTACAGCAGCCTGAAGAAGGGGAAGGGGAGCGAGCGCCTGAAGAGGCTGCCCAGGAGGGCTCAGCAGGAACGTGAGCCCCATGAT     @@@FFFFFGFDHHJJGHJIJIJJJJJIJIJIIIJJIIH?H)?FHBGHIIHFFDDEECCBDBDDBADDDDDBDD>BBCDDCDDDDDBBDDDDDDBBD?>C     AS:i:-17        XN:i:0  XM:i:4  XO:i:0  XG:i:0  NM:i:4  MD:Z:0A0G0C37T58        YT:Z:UP RG:Z:CP68\nHWI-ST665R_d1k7macxx:1:2103:8517:110354#0       133     A.inornata_:_A.inornata_Mc1R_:_scaffold00001    7       0       *       =       7       0       GACAACATCTTTGGAGGGGGCTTAGAAAGAGATCTGAAGACAACGGACCTCTTGCAGAAAGTTGCATTCCTCAAGCAGATAACAAGACCCAATCAACAT     C@@FFFFFHHHHGIGIJJIIIIFGIJJIJIGGHIGJJGHIIIJJIFIJHGEEDFFFFCCCE>CCDDEEDDCDCCDDDDDDDDDDDCCDDDBACC@CDDC     YT:Z:UP RG:Z:CP68\n",
			"settings":
			{
				"buffer_size": 836,
				"line_ending": "Unix",
				"name": "HWI-ST665R_d1k7macxx:1:2103:8517:110354#0       73"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 367.0,
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"PACK",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"key",
				"Preferences: Key Bindings - User"
			],
			[
				"key ",
				"Preferences: Key Bindings - User"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: List Packages"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"primer1",
			"identified",
			"primer1Mi",
			"Primer2Mismatch",
			"primer1Mismatch",
			"unwritten",
			"writeread",
			"outSE",
			"lasttime",
			"read1.seq"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Dual_BC_tagger.py",
					"settings":
					{
						"buffer_size": 9746,
						"regions":
						{
						},
						"selection":
						[
							[
								172,
								172
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"annotations":
							[
								"TODO",
								"README",
								"FIXME"
							],
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"csslint_options":
							{
								"adjoining-classes": "warning",
								"box-model": true,
								"box-sizing": "warning",
								"compatible-vendor-prefixes": "warning",
								"display-property-grouping": true,
								"duplicate-background-images": "warning",
								"duplicate-properties": true,
								"empty-rules": true,
								"errors": true,
								"fallback-colors": "warning",
								"floats": "warning",
								"font-faces": "warning",
								"font-sizes": "warning",
								"gradients": "warning",
								"ids": "warning",
								"import": "warning",
								"important": "warning",
								"known-properties": true,
								"outline-none": "warning",
								"overqualified-elements": "warning",
								"qualified-headings": "warning",
								"regex-selectors": "warning",
								"rules-count": "warning",
								"shorthand": "warning",
								"star-property-hack": "warning",
								"text-indent": "warning",
								"underscore-property-hack": "warning",
								"unique-headings": "warning",
								"universal-selector": "warning",
								"vendor-prefix": true,
								"zero-units": "warning"
							},
							"gjslint_ignore":
							[
								110.0
							],
							"gjslint_options":
							[
							],
							"javascript_linter": "jshint",
							"jshint_options":
							{
								"browser": true,
								"evil": true,
								"regexdash": true,
								"sub": true,
								"trailing": true,
								"wsh": true
							},
							"pep8": true,
							"pep8_ignore":
							[
								"E501"
							],
							"perl_linter": "perlcritic",
							"pyflakes_ignore":
							[
							],
							"pyflakes_ignore_import_*": true,
							"sublime_auto_complete": true,
							"sublimelinter": true,
							"sublimelinter_delay": 2.0,
							"sublimelinter_disable":
							[
							],
							"sublimelinter_executable_map":
							{
							},
							"sublimelinter_fill_outlines": false,
							"sublimelinter_gutter_marks": true,
							"sublimelinter_gutter_marks_theme": "simple",
							"sublimelinter_mark_style": "none",
							"sublimelinter_notes": false,
							"sublimelinter_objj_check_ascii": false,
							"sublimelinter_popup_errors_on_save": false,
							"sublimelinter_syntax_map":
							{
								"C++": "c",
								"Python Django": "python",
								"Ruby on Rails": "ruby"
							},
							"sublimelinter_wrap_find": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 836,
						"regions":
						{
						},
						"selection":
						[
							[
								41,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "HWI-ST665R_d1k7macxx:1:2103:8517:110354#0       73",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2.0,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5.0,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10.0,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"Package Control Messages"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
